/*
codigo repetido
*/

/*Esta funcion recibe una lista con numeros y retorna su suma
    [1,1,1,1] = 4
    sirve para contar los numeros que estan en valorYpos bien o los de solo valor
    y tambien para el numero de rondas*/
succ([],0).
succ([X|Resto],Resultado):-
    succ(Resto,Resultado1),
    Resultado is X + Resultado1.
/*Aumenta lista que contiene la cantidad de ValorYPos igual*/
succB:-
    buenos(B),
    retract(buenos(B)),
    append([1],B,NB),
    assert(buenos(NB)).

/*Aumenta lista que contiene la cantidad de solo valor igual*/
succR:-
    regulares(R),
    retract(regulares(R)),
    append([1],R,NR),
    assert(regulares(NR)).

beginB_R:-
    (retract(buenos(_)) , assert(buenos([])); assert(buenos([])) ),
    (retract(regulares(_)) , assert(regulares([])) ; assert(regulares([]))).
deleteB_R:-
    retract(buenos(_)),
    retract(regulares(_)).

checkV(E, [X], Restante):-
    (E == X, Restante = [], succR,!
    ;
    Restante = [X]).

checkV(E,[X|Resto],Restante):-
    (E == X, Restante = Resto, succR,!
    ;
    checkV(E,Resto,Restante2), append([X],Restante2,Restante)).

checkV([A],Lista):-
    checkV(A,Lista,_),!.
checkV([A|Resto],Lista):-
    checkV(A,Lista,Resultado),checkV(Resto,Resultado).

check([A,B,C,D],[E,F,G,H],Buenos,Regulares):-
    beginB_R,
    Pro = [],
    Cor = [],
    (A == E, succB,Pro1 = Pro, Cor1 = Cor; append([A],Pro,Pro1), append([E],Cor,Cor1)),
    (B == F, succB,Pro2 = Pro1, Cor2 = Cor1; append([B],Pro1,Pro2), append([F],Cor1,Cor2)),
    (C == G, succB,Pro3 = Pro2, Cor3 = Cor2; append([C],Pro2,Pro3), append([G],Cor2,Cor3)),
    (D == H, succB,Pro4 = Pro3, Cor4 = Cor3; append([D],Pro3,Pro4), append([H],Cor3,Cor4)),
    checkV(Pro4,Cor4),
    buenos(Bue),
    regulares(Reg),
    succ(Bue,Buenos),
    succ(Reg,Regulares),
    %%write('Iguales en valor y posicion: '),write(Buenos),nl,
    %%write('Iguales en valor: '),write(Regulares),
    deleteB_R.



/***********************/

f(0).
f(1).
f(2).
f(3).
f(4).
f(5).
f(6).
f(7).
f(8).
f(9).

%%secuenciasAll(A),length(A,X).





secuencia(X,Y,Z,J):-
	f(X),f(Y),f(Z),f(J).

eliminarListaSecuencias:-
	retract(secuenciasAll(_)).



listaSecuencias:-
    findall([X,Y,Z,J],secuencia(X,Y,Z,J),A),
		assert(secuenciasAll(A)),nl,
		write(A),nl.

leerVP(N1):-
	nl,
	write('Cuantos estan bien en valor y pos?'),nl,
	get_char(A),
	read_string(user_input, "\n", "\r", _, _),
	(member(A,['1','2','3','0']),
	    N1 = A,!;
	    write('Solo puede ser [0,1,2,3]'),nl,
	    leerVP(A1),N1 = A1).


leerV(N1):-
	nl,
	write('Cuantos estan bien solo en valor?'),nl,
	get_char(A),
	read_string(user_input, "\n", "\r", _, _),
	(member(A,['1','2','3','0','4']),
	    N1 = A,!;
	    write('Solo puede ser [0,1,2,3,4]'),nl,
	    leerVP(A1),N1 = A1).

leerSN(P):-
	nl,
	write('Su numero es: '),write(P),write('?(Y/N)'),nl,
	get_char(R),
	read_string(user_input, "\n", "\r", _, _),
	(
		(member(R,['Y','y']),write('Termino :)'),!;
		member(R,['N','n']),seguir(P)
	);
	write('Tiene que ser Y/N'),nl,leerSN(P)
	).





reducirLista(P,VP,V,[],[]):-!.
reducirLista(P,VP,V,[X|Resto],Resultado):-
		check(P,X,PV1,V1),
		(VP == PV1, V == V1, reducirLista(P,VP,V,Resto,Rest), append([X],Rest,Resultado);
		reducirLista(P,VP,V,Resto,Rest), Resultado = Rest).


reducirLista(P,VP,V):-
	secuenciasAll(A),
	reducirLista(P,VP,V,A,NewSecu),
	retract(secuenciasAll(A)),
	assert(secuenciasAll(NewSecu)),nl,nl,write(NewSecu),nl,nl.

seguir(P):-
		leerVP(VPchar),
		leerV(Vchar),
		atom_number(VPchar, VP),
		atom_number(Vchar, V),
		reducirLista(P,VP,V),
		primeraSecuencia(Secu),
		(Secu == [0],write('Fin del juego') ;leerSN(Secu)).


pop([X|Resto],0,X,Resto):-!.
pop([X|Resto],Num,B,[X|Rest]):-
		N is Num - 1,
		pop(Resto,N,B,Rest).

remove([],P,[]):-!.
remove([P|Resto],P,Resto):-!.
remove([X|Resto],P,[X|Rest]):-
	remove(Resto,P,Rest).


primeraSecuencia(OneSecu):-
	secuenciasAll(A),
	%%write(A),nl,nl,
	length(A,X),
	%%write('Random: '),write(X),nl,nl,
	(X == 0,write('Mentiroso :3'),OneSecu = [0];
	random(0,X,Random),

	pop(A,Random,OneSecu,NewSecu),
	%%write(OneSecu),nl,
	%%write(NewSecu),nl,
	retract(secuenciasAll(A)),
	assert(secuenciasAll(NewSecu))).

iniciarJuego:-
		listaSecuencias,
		primeraSecuencia(Secu),nl,
		leerSN(Secu),
		eliminarListaSecuencias,!.
